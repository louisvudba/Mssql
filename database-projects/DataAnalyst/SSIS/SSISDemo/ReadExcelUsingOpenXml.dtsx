<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="7/6/2020 4:26:29 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="HN-SD-0834-WK"
  DTS:CreatorName="HARVEYNASH\lamvut1"
  DTS:DTSID="{DEB93A63-AD0E-49AF-BF5D-8F4C565966B6}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.121"
  DTS:LocaleID="1033"
  DTS:ObjectName="Package"
  DTS:PackageType="5"
  DTS:VersionBuild="16"
  DTS:VersionGUID="{C4328387-A6D3-45E7-A36B-9E2274883C31}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Data Flow Task"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:Description="Data Flow Task"
      DTS:DTSID="{86B25B93-B677-4058-9DDB-F3B2E877444F}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:ObjectName="Data Flow Task"
      DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <pipeline
          version="1">
          <components>
            <component
              refId="Package\Data Flow Task\Script Component"
              componentClassID="Microsoft.ManagedComponentHost"
              contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;12"
              description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
              name="Script Component"
              version="11">
              <properties>
                <property
                  dataType="System.String"
                  description="Stores the source code of the component"
                  isArray="true"
                  name="SourceCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="33">
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        /*
         * Add your code here
         */
    }

    public override void CreateNewOutputRows()
    {
        /*
          Add rows by calling the AddRow method on the member variable named "<Output Name>Buffer".
          For example, call MyOutputBuffer.AddRow() if your output was named "MyOutput".
        */
        string filePath = "E:\\Repos\\LvRepo\\TestData\\Test01.xlsx";
        DataTable dt = ExcelUtility.GetDataTableFromExcelFile(filePath,"LamVT", 1);
        foreach(DataRow r in dt.Rows)
        {
            outputDataBuffer.AddRow();
            outputDataBuffer.Id = (r[0] is DBNull) ? "" : r[0].ToString();
            outputDataBuffer.TextValue = (r[1] is DBNull) ? "" : r[1].ToString();
            outputDataBuffer.NumberValue = (r[2] is DBNull) ? "" : r[2].ToString();
            outputDataBuffer.MixedValue = (r[3] is DBNull) ? "" : r[3].ToString();
        }
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class outputDataBuffer: ScriptBuffer

{
    public outputDataBuffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String Id
    {
        set
        {
            this[0] = value;
        }
    }
    public bool Id_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String TextValue
    {
        set
        {
            this[1] = value;
        }
    }
    public bool TextValue_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(1);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String NumberValue
    {
        set
        {
            this[2] = value;
        }
    }
    public bool NumberValue_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(2);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String MixedValue
    {
        set
        {
            this[3] = value;
        }
    }
    public bool MixedValue_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(3);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public outputDataBuffer outputDataBuffer;

    public virtual void FinishOutputs()
    {
    }

    private void MarkOutputsFinished()
    {

        if (null != outputDataBuffer)
        {
            outputDataBuffer.SetEndOfRowset();
            outputDataBuffer = null;
        }

    }

    public override void PrimeOutput(int Outputs, int[] OutputIDs, PipelineBuffer[] Buffers, OutputNameMap OutputMap)
    {
       for(int Idx = 0; Idx < Outputs; Idx++)
       {
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"outputData"))
            {
                outputDataBuffer = new outputDataBuffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
        }

        CreateNewOutputRows();

        FinishOutputs();
        MarkOutputsFinished();

    }

    public virtual void CreateNewOutputRows()
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[ExcelUltility.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Data;
using System.Windows.Forms;
using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;

public static class ExcelUtility
{   
    private static string GetCellValue(WorkbookPart wbPart, List<Cell> theCells, string cellColumnReference)
    {
        Cell cell = null;
        string value = "";
        foreach (Cell c in theCells)
        {
            if (c.CellReference.Value.StartsWith(cellColumnReference))
            {
                cell = c;
                break;
            }
        }
        if (cell != null)
        {
            CellValue cellValue = cell.CellValue;
            string text = (cellValue == null) ? cell.InnerText : cellValue.Text;
            if (cell.DataType?.Value == CellValues.SharedString)
            {
                text = wbPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(Convert.ToInt32(cell.CellValue.Text)).InnerText;
            }
            string cellText = (text ?? string.Empty).Trim();

            if (cell.StyleIndex != null)
            {
                CellFormat cellFormat = wbPart.WorkbookStylesPart.Stylesheet.CellFormats.ChildElements[int.Parse(cell.StyleIndex.InnerText)] as CellFormat;

                if (cellFormat != null)
                {
                    var dateFormat = GetDateTimeFormat(cellFormat.NumberFormatId);
                    if (!string.IsNullOrEmpty(dateFormat))
                    {
                        if (!string.IsNullOrEmpty(cellText))
                        {
                            if (double.TryParse(cellText, out var cellDouble))
                            {
                                var theDate = DateTime.FromOADate(cellDouble);
                                cellText = theDate.ToString(dateFormat);
                            }
                        }
                    }
                }
            }

            value = cellText;

            //value = theCell.InnerText;            
            //if (theCell.DataType != null)
            //{
            //    switch (theCell.DataType.Value)
            //    {
            //        case CellValues.SharedString:
            //            // For shared strings, look up the value in the shared strings table.
            //            var stringTable = wbPart.GetPartsOfType<SharedStringTablePart>().FirstOrDefault();
            //            // If the shared string table is missing, something is wrong. Return the index that is in the cell. Otherwise, look up the correct text in the table.
            //            if (stringTable != null)
            //            {
            //                value = stringTable.SharedStringTable.ElementAt(int.Parse(value)).InnerText;
            //            }
            //            break;
            //        case CellValues.Boolean:
            //            switch (value)
            //            {
            //                case "0":
            //                    value = "FALSE";
            //                    break;
            //                default:
            //                    value = "TRUE";
            //                    break;
            //            }
            //            break;                    
            //    }
            //}
        }
        return value;
    } 

    private static string GetCellValue(WorkbookPart wbPart, List<Cell> theCells, int index)
    {
        return GetCellValue(wbPart, theCells, GetExcelColumnName(index));
    }

    private static string GetExcelColumnName(int columnNumber)
    {
        int dividend = columnNumber;
        string columnName = String.Empty;
        int modulo;
        while (dividend > 0)
        {
            modulo = (dividend - 1) % 26;
            columnName = Convert.ToChar(65 + modulo).ToString() + columnName;
            dividend = (int)((dividend - modulo) / 26);
        }
        return columnName;
    }

    //Only xlsx files
    public static DataTable GetDataTableFromExcelFile(string filePath, string sheetName = "", int type = 0)
    {
        DataTable dt = new DataTable();
        switch (type)
        {
            case 0:
                dt = GetDataTableFromExcelFileType0(filePath, sheetName);
                break;
            case 1:
                dt = GetDataTableFromExcelFileType1(filePath, sheetName);
                break;
        }
        return dt;
    }
    public static DataTable GetDataTableFromExcelFileType1(string filePath, string sheetName)
    {
        DataTable dt = new DataTable();
        try
        {
            using (SpreadsheetDocument document = SpreadsheetDocument.Open(filePath, false))
            {
                WorkbookPart wbPart = document.WorkbookPart;
                IEnumerable<Sheet> sheets = document.WorkbookPart.Workbook.GetFirstChild<Sheets>().Elements<Sheet>();
                string sheetId = sheetName != "" ? sheets.Where(q => q.Name == sheetName).First().Id.Value : sheets.First().Id.Value;
                WorksheetPart wsPart = (WorksheetPart)wbPart.GetPartById(sheetId);
                SheetData sheetdata = wsPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                IEnumerable<Row> rows = sheetdata.Descendants<Row>();
                int totalHeaderCount = 0;
                //Get the header                    
                foreach (Row r in rows)
                {
                    if (totalHeaderCount < r.Descendants<Cell>().Count()) totalHeaderCount = r.Descendants<Cell>().Count();
                }
                for (int i = 0; i < totalHeaderCount; i++)
                {
                    dt.Columns.Add("c" + i.ToString());
                }
                List<Row> rowsCheck = sheetdata.Elements<Row>().ToList();
                MessageBox.Show(rowsCheck.Count.ToString());
                foreach (Row r in rows)
                {
                    DataRow tempRow = dt.NewRow();
                    //Always get from the header count, because the index of the row changes where empty cell is not counted
                    for (int i = 1; i <= totalHeaderCount; i++)
                    {
                        tempRow[i - 1] = GetCellValue(wbPart, r.Elements<Cell>().ToList(), i);
                    }
                    dt.Rows.Add(tempRow);                    
                }
            }
        }
        catch (Exception)
        {

        }
        return dt;
    }
    public static DataTable GetDataTableFromExcelFileType0(string filePath, string sheetName)
    {
        DataTable dt = new DataTable();
        try
        {
            using (SpreadsheetDocument document = SpreadsheetDocument.Open(filePath, false))
            {
                WorkbookPart wbPart = document.WorkbookPart;
                IEnumerable<Sheet> sheets = document.WorkbookPart.Workbook.GetFirstChild<Sheets>().Elements<Sheet>();
                string sheetId = sheetName != "" ? sheets.Where(q => q.Name == sheetName).First().Id.Value : sheets.First().Id.Value;
                WorksheetPart wsPart = (WorksheetPart)wbPart.GetPartById(sheetId);
                SheetData sheetdata = wsPart.Worksheet.Elements<SheetData>().FirstOrDefault();
                int totalHeaderCount = sheetdata.Descendants<Row>().ElementAt(0).Descendants<Cell>().Count();
                //Get the header                    
                for (int i = 1; i <= totalHeaderCount; i++)
                {
                    dt.Columns.Add(GetCellValue(wbPart, sheetdata.Descendants<Row>().ElementAt(0).Elements<Cell>().ToList(), i));
                }
                foreach (Row r in sheetdata.Descendants<Row>())
                {
                    if (r.RowIndex > 0)
                    {
                        DataRow tempRow = dt.NewRow();

                        //Always get from the header count, because the index of the row changes where empty cell is not counted
                        for (int i = 1; i <= totalHeaderCount; i++)
                        {
                            tempRow[i - 1] = GetCellValue(wbPart, r.Elements<Cell>().ToList(), i);
                        }
                        dt.Rows.Add(tempRow);
                    }
                }
            }
        }
        catch (Exception)
        {

        }
        return dt;
    }

    private static readonly Dictionary<uint, string> DateFormatDictionary = new Dictionary<uint, string>()
    {
        [14] = "dd/MM/yyyy",
        [15] = "d-MMM-yy",
        [16] = "d-MMM",
        [17] = "MMM-yy",
        [18] = "h:mm AM/PM",
        [19] = "h:mm:ss AM/PM",
        [20] = "h:mm",
        [21] = "h:mm:ss",
        [22] = "M/d/yy h:mm",
        [30] = "M/d/yy",
        [34] = "yyyy-MM-dd",
        [45] = "mm:ss",
        [46] = "[h]:mm:ss",
        [47] = "mmss.0",
        [51] = "MM-dd",
        [52] = "yyyy-MM-dd",
        [53] = "yyyy-MM-dd",
        [55] = "yyyy-MM-dd",
        [56] = "yyyy-MM-dd",
        [58] = "MM-dd",
        [165] = "M/d/yy",
        [166] = "dd MMMM yyyy",
        [167] = "dd/MM/yyyy",
        [168] = "dd/MM/yy",
        [169] = "d.M.yy",
        [170] = "yyyy-MM-dd",
        [171] = "dd MMMM yyyy",
        [172] = "d MMMM yyyy",
        [173] = "M/d",
        [174] = "M/d/yy",
        [175] = "MM/dd/yy",
        [176] = "d-MMM",
        [177] = "d-MMM-yy",
        [178] = "dd-MMM-yy",
        [179] = "MMM-yy",
        [180] = "MMMM-yy",
        [181] = "MMMM d, yyyy",
        [182] = "M/d/yy hh:mm t",
        [183] = "M/d/y HH:mm",
        [184] = "MMM",
        [185] = "MMM-dd",
        [186] = "M/d/yyyy",
        [187] = "d-MMM-yyyy"
    };

    private static string GetDateTimeFormat(UInt32Value numberFormatId)
    {
        return DateFormatDictionary.ContainsKey(numberFormatId) ? DateFormatDictionary[numberFormatId] : string.Empty;
    }
}

]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_11c88d5d346b4a66bfbe92292474fdb2.csproj]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{B4DD9363-40E1-46C8-9119-556020B736BA}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_11c88d5d346b4a66bfbe92292474fdb2</RootNamespace>
    <AssemblyName>SC_11c88d5d346b4a66bfbe92292474fdb2</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL" />
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=14.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=14.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=14.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=14.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="ExcelUltility.cs" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
    <Reference Include="WindowsBase" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_SC140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_11c88d5d346b4a66bfbe92292474fdb2.Properties.Settings.get_Default():SC_11c88d5d346b4a66bfbe92292474fdb2.Properties.Sett" +
    "ings")]

namespace SC_11c88d5d346b4a66bfbe92292474fdb2.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Project]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>SC_11c88d5d346b4a66bfbe92292474fdb2</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>SC_11c88d5d346b4a66bfbe92292474fdb2</msb:DisplayName>
    <msb:ProjectId>{40CE754B-DCB6-4DDA-8EC5-416B28070D82}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="SC_11c88d5d346b4a66bfbe92292474fdb2.csproj" />
    <msb:File Include="main.cs" />
    <msb:File Include="BufferWrapper.cs" />
    <msb:File Include="ExcelUltility.cs" />
    <msb:File Include="ComponentWrapper.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_11c88d5d346b4a66bfbe92292474fdb2")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_11c88d5d346b4a66bfbe92292474fdb2")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_11c88d5d346b4a66bfbe92292474fdb2.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_11c88d5d346b4a66bfbe92292474fdb2.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_11c88d5d346b4a66bfbe92292474fdb2.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_11c88d5d346b4a66bfbe92292474fdb2.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_11c88d5d346b4a66bfbe92292474fdb2.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Stores the binary representation of the component"
                  isArray="true"
                  name="BinaryCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="2">
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_11c88d5d346b4a66bfbe92292474fdb2.dll]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[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
djQuMC4zMDMxOQAAAAAFAGwAAAAcCwAAI34AAIgLAAAYDQAAI1N0cmluZ3MAAAAAoBgAAKQDAAAj
VVMARBwAABAAAAAjR1VJRAAAAFQcAAA4BAAAI0Jsb2IAAAAAAAAAAgAAAVcdogkJCwAAAPoBMwAW
AAABAAAAUwAAAAsAAAALAAAAKgAAACMAAABsAAAAAgAAABIAAAAHAAAAAwAAAAsAAAAMAAAACAAA
AAEAAAAIAAAAAQAAAAIAAAAQAAAAAABABgEAAAAAAAYAjASUCAYAIAWUCAYA2AOBCA8ACAkAAAYA
BQRjBwYAbwRjBwYAUARjBwYABwVjBwYArARjBwYAxQRjBwYAHARjBwYANwTmBQYAaAoGBwYA8QBW
AQoAuAvFBQYAvABWAQoAaAZ1CkMAXwgAAAoAlwV1CgoAXQp1CgYAqwIGBw4ACQI3AQoAHgvFBQYA
lABWAQoAbwp1CgoAQwF1CgoAfQx1CgYArgBWAQ4Aaww3AQYArAcGBwoAVQXMBgYAoAOUCBIA4AS0
AgYAUAizCQYANAIGBxIAGgi0AhYACwi0AhIAwge0AhIAUAu0AgYAuwOBCAYAKwi0CAYAtgdOBxoA
iwMqBhoA7AMqBhoAVwM5BwoA9AJ1CgoAegXMBgYAAgYGBwoABwvMBgoA+ArMBgoAogDMBgoAUAl1
CgoAngvFBQoAFwJ1CgoA9QZ1CgYA9gsGBx4AKQLaBwoA1QvFBQoAnAp1CgoA3gl1CgoABQzMBgoA
4gLMBgYA5AAGBwYAQAIGBwYA6AcGBwoAIQZ1CgoA6gl1CgYA6gAGBwoAOwjFBQoAxQvFBQoA6AvF
BQoAqwp1Cg4AdQc3AQ4ALgc3ASIAqAySCSIA6wqSCQ4Aigc3AQ4APAM3AQYAbQYGBwYAnAcGBwYA
+AIGBwYARwIGBwYAwwxjBwAAAAAiAQAAAAABAAEAgQEQAPsMAAA1AAEAAQABABAAIwcAABQAAgAJ
AAEAEAD6BwAAkQACAA0AAQAQADILAACdAAIAGQABABAAxgkAADUABQAeAAEAEABGCQAANQAGAB8A
AAAQALsIFwk1AAcAIAAAARAAgAkXCbUACQAkAAMBEAABAAAANQAKACcAAwEQABYAAAA1AAsAKQAx
AMwMwgIGAMYJygIGAEYJzgIGAPoH0gIBAEAL1gIBAEAL1gIRABIH2wIRACwD4AIRANMB5QIGAKEC
qgAGAKECqgBQIAAAAACRAJQF6QIBALAhAAAAAJEAlAX2AgQAwCEAAAAAkQCOAgMDBwAEIgAAAACW
AGsCCAMIADQiAAAAAJYAwwAQAwsAbCQAAAAAlgB1ABADDQBQJgAAAACRAEsKFwMPAHwmAAAAAJEY
cAgdAxAABykAAAAAxgA+BQYAEAAPKQAAAADGAEkFBgAQABgpAAAAAMYAJgoGABAAPCoAAAAAhhhq
CAYAEABEKgAAAACGGGoIZgIQAE8qAAAAAIYIeAEQABMAWSoAAAAAhgh0BiEDFABwKgAAAACGCLEF
EAAVAHoqAAAAAIYIrwYhAxYAkSoAAAAAhgihBRAAFwCbKgAAAACGCJgGIQMYALIqAAAAAIYIawUQ
ABkAvCoAAAAAhgiCBiEDGgDTKgAAAACGAHMMBgAbANsqAAAAAIYAtQoGABsA4yoAAAAAhgC4Cl8A
GwDrKgAAAACGGGoIBgAbAAsrAAAAAMYBDwoGABsADSsAAAAAgQCxAQYAGwAsKwAAAADGAD8MJgMb
AAsrAAAAAMYBJgoGAB8AgSsAAAAAhhhqCDQDHwCQKwAAAACGGGoINAMgAJ8rAAAAAIMYaggGACEA
pysAAAAAkwgnCDsDIQDTKwAAAACTCBQDQQMhANorAAAAAJMIIANHAyEA4isAAAAAlgjQCk4DIgDp
KwAAAACGGGoIBgAiAPErAAAAAJEYcAgdAyIAnysAAAAAhhhqCAYAIgD9KwAAAACDAFAAUwMiAJ8r
AAAAAIYYaggGACMAFSwAAAAAgwArAFMDIwAAAAEAkwsAAAIAiQkAAAMA9QEAAAEAkwsAAAIAiQkA
AAMAogwAAAEA7QcAAAEACQYQEAIAoQIQEAMA/QIAAAEACQYAAAIAoQIAAAEACQYAAAIAoQIAAAEA
kgEAAAEAIAgAAAIAWwkAAAMA0AcAAAEAvwUAAAEAvwUAAAEAvwUAAAEAvwUAAAEAvwUAAAEAvwUA
AAEAvwUAAAEAvwUAAAEAFQoAAAIAdwgAAAMA0gkAAAQA0AcAAAEAVgsAAAEAVgsAAAEAvwUAAAEA
5AcAAAEA5AcJAGoIAQARAGoIBgAZAGoICgApAGoIEAAxAGoIEAA5AGoIEABBAGoIEABJAGoIEABR
AGoIEABZAGoIEABhAGoIEAABAWoIBgAJAWoIBgBBAWoIBgBhAWoIFQAMAFwIOwAUAGALSwBxAeMB
UAB5AWEFVgCBARIGWgAUAEsMXwAZAW8DBgBxAYYFYwCJAVQMVgCRAV0MVgBxAdUCaAAcAGEFSwB5
AJoLfACpARMCggCRAQYKiADBAeIAmADJAToKnQCBARANqgCBAQ0HVgBxAYYMrQB5ANELsgDRAZgK
uADZAdoJvgCRAf0JxADxAV0MVgD5AXoDmADpAeMGygChAH8BrQCBAQgN0QABAncD1gCpAIAD3QCp
AAAG4wDBAeYH7wAJAgAGVgCBAUQK9ACxAGoIBgC5AB4HKQG5ALQLMAF5AB0GNQGRAcUBOwGBAe0M
TAHJATkMUgHJAHEBUAAkAGoIZwHJAQIDbQEpAqEBhQE5AqcKjAHJAdwKUgGRAfEJiAAsAFwIowE0
AGALSwDJAXALuAERAUsMXwCxAKcJwwH5AQAGVgBJAq0ByQHJAf4L0AE8AGwL5wFZAoEM6wGxAHoM
8gHpAOwG9wGxAB0K/QFpAq0BAwLZAJUMrQD5AMQKKgJEALMMNwJEAOMGPQJEAGoIBgBEAOwGRAI5
AT4FBgA5AUkFBgBxAlwIVwIRAWALXQLpAOMGYQJpAAAGVgAhAWoIZgIhAewG9wEhAcQGAQCBAmoI
EAAhAXMMBgAhAbUKBgAhAbgKXwA5AWoIBgA5ASsBdgI5AW8JfgJpAGoIBgCJAlkChAKJAr8MjQJJ
AWoIkwJpAWoIBgDJAIUCUAB5AcQKmwKBAeEMTAEOACUAAAAIACkAvQIuAAsAcgMuABMAewMuABsA
mgMuACMAowMuACsAzAMuADMAzAMuADsAzAMuAEMAowMuAEsA0gMuAFMAzAMuAFsA6QNjAGsAMwQD
AXMAMwQhAWMAMwQpAXsAmgNDAWMAMwRJAXsAmgNjAWMAMwQcAOgA+gD/AAkCTAJyAgQAAQAIAAkA
CQALAAAAqgFZAwAAeAZdAwAAtQVZAwAAswZdAwAApQVZAwAAnAZdAwAAbwVZAwAAhgZdAwAAKwhh
AwAANANnAwAA4wptAwEADgADAAEADwAFAAEAEAAHAAEAEQAJAAEAEgALAAEAEwANAAEAFAAPAAEA
FQARAAIAIQATAAIAIgAVAAEAIwAVAAIAJAAXADQARABzAF4BnAGsAeABMAIEgAAAAQAAAAAAAAAA
AAAAAAD+AAAABAAAAAAAAAAAAAAAogJNAQAAAAACAAUA/xUAAAAAAACrAswGAAAAAAQAAAAAAAAA
AAAAAKICNwEAAAAADgAAAAAAAAAAAAAAtAJ2CwAAAAAOAAAAAAAAAAAAAAC0AhgMAAAAAAQAAAAA
AAAAAAAAAKICBgcAAAAABAAAAAAAAAAAAAAAogIIAwAAAAAEAAAAAAAAAAAAAACiApIJAAAAAAAA
AAABAAAAxQgAAAoAAgALAAIAPQCSAEEAkgBvAEEBPQBHAXMARwF5AEcBPQCSAX8AkgGBAJcBgQCz
AYcAswE9AJcBkQCXAT0AswGRALMBQQCXAQAAAAAAPD5jX19EaXNwbGF5Q2xhc3M0XzAAPD5jX19E
aXNwbGF5Q2xhc3M1XzAAPEdldERhdGFUYWJsZUZyb21FeGNlbEZpbGVUeXBlMD5iX18wADxHZXRE
YXRhVGFibGVGcm9tRXhjZWxGaWxlVHlwZTE+Yl9fMABHZXREYXRhVGFibGVGcm9tRXhjZWxGaWxl
VHlwZTAASUVudW1lcmFibGVgMQBFbnVtVmFsdWVgMQBJRW51bWVyYXRvcmAxAExpc3RgMQBHZXRE
YXRhVGFibGVGcm9tRXhjZWxGaWxlVHlwZTEAVG9JbnQzMgBGdW5jYDIARGljdGlvbmFyeWAyAFND
XzExYzg4ZDVkMzQ2YjRhNjZiZmJlOTIyOTI0NzRmZGIyADxNb2R1bGU+AEdldE91dHB1dElEAFN5
c3RlbS5EYXRhAFNoZWV0RGF0YQBtc2NvcmxpYgBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYwBn
ZXRfSWQAc2V0X0lkAGdldF9OdW1iZXJGb3JtYXRJZABudW1iZXJGb3JtYXRJZABHZXRQYXJ0QnlJ
ZABBZGQATWFya091dHB1dHNGaW5pc2hlZABHZXRGaXJzdENoaWxkAGRlZmF1bHRJbnN0YW5jZQBn
ZXRfQ2VsbFJlZmVyZW5jZQBjZWxsQ29sdW1uUmVmZXJlbmNlAERhdGFUYWJsZQBnZXRfU2hhcmVk
U3RyaW5nVGFibGUARW51bWVyYWJsZQBJRGlzcG9zYWJsZQBEb3VibGUAUnVudGltZVR5cGVIYW5k
bGUAR2V0VHlwZUZyb21IYW5kbGUAR2V0RGF0YVRhYmxlRnJvbUV4Y2VsRmlsZQBnZXRfTmFtZQBH
ZXRFeGNlbENvbHVtbk5hbWUAc2hlZXROYW1lAERhdGVUaW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIu
RHRzLlBpcGVsaW5lAGdldF9EYXRhVHlwZQBPcGVuWG1sU2ltcGxlVHlwZQBDZWxsVHlwZQB0eXBl
AFdoZXJlAFN5c3RlbS5Db3JlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVy
ZQBJbnRlcm5hbERhdGFDb2xsZWN0aW9uQmFzZQBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBEaXNw
b3NlAFRyeVBhcnNlAEZyb21PQURhdGUARWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29tcGlsZXJHZW5l
cmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0
cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFz
c2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJs
eUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBDb21w
aWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3Nl
bWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0Q29tcG9uZW50RW50cnlQb2ludEF0dHJp
YnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1
dGUAUHJlRXhlY3V0ZQBQb3N0RXhlY3V0ZQBVSW50MzJWYWx1ZQBnZXRfVmFsdWUAc2V0X01peGVk
VmFsdWUAU3RyaW5nVmFsdWUAZ2V0X0NlbGxWYWx1ZQBHZXRDZWxsVmFsdWUAc2V0X051bWJlclZh
bHVlAHNldF9UZXh0VmFsdWUAdmFsdWUARG9jdW1lbnRGb3JtYXQuT3BlblhtbC5QYWNrYWdpbmcA
U3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBUb1N0cmluZwBmaWxlUGF0aABTdGFydHNXaXRoAGdl
dF9Xb3JrYm9vawBTeXN0ZW0uQ29tcG9uZW50TW9kZWwAU0NfMTFjODhkNWQzNDZiNGE2NmJmYmU5
MjI5MjQ3NGZkYjIuZGxsAENlbGwAREJOdWxsAHNldF9JZF9Jc051bGwAc2V0X01peGVkVmFsdWVf
SXNOdWxsAHNldF9OdW1iZXJWYWx1ZV9Jc051bGwAc2V0X1RleHRWYWx1ZV9Jc051bGwAU2V0TnVs
bABEb2N1bWVudEZvcm1hdC5PcGVuWG1sAGdldF9JdGVtAHNldF9JdGVtAFNoYXJlZFN0cmluZ0l0
ZW0AU3lzdGVtAFRyaW0AcmVzb3VyY2VNYW4AT3BlbgBTY3JpcHRNYWluAERhdGFDb2x1bW4AU3lz
dGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2JhbGl6YXRpb24AU3lzdGVtLlJlZmxlY3Rpb24A
RGF0YUNvbHVtbkNvbGxlY3Rpb24ARGF0YVJvd0NvbGxlY3Rpb24ASW52YWxpZE9wZXJhdGlvbkV4
Y2VwdGlvbgBDdWx0dXJlSW5mbwBPdXRwdXROYW1lTWFwAE91dHB1dE1hcABTeXN0ZW0uTGlucQBU
b0NoYXIAY29sdW1uTnVtYmVyAG91dHB1dERhdGFCdWZmZXIAUGlwZWxpbmVCdWZmZXIAU2NyaXB0
QnVmZmVyAGdldF9SZXNvdXJjZU1hbmFnZXIAT3BlblhtbFBhcnRDb250YWluZXIASUVudW1lcmF0
b3IAR2V0RW51bWVyYXRvcgAuY3RvcgAuY2N0b3IAT3V0cHV0SURzAFN5c3RlbS5EaWFnbm9zdGlj
cwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU0NfMTFj
ODhkNWQzNDZiNGE2NmJmYmU5MjI5MjQ3NGZkYjIuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3Vy
Y2VzAERlYnVnZ2luZ01vZGVzAFNDXzExYzg4ZDVkMzQ2YjRhNjZiZmJlOTIyOTI0NzRmZGIyLlBy
b3BlcnRpZXMAVmFyaWFibGVzAENlbGxWYWx1ZXMAQnVmZmVyQ29sdW1uSW5kZXhlcwBHZXRDb2x1
bW5JbmRleGVzAFNldHRpbmdzAHRoZUNlbGxzAFN5c3RlbS5XaW5kb3dzLkZvcm1zAGdldF9Db2x1
bW5zAFN5c3RlbS5Db2xsZWN0aW9ucwBDb25uZWN0aW9ucwBCdWZmZXJzAGdldF9DZWxsRm9ybWF0
cwBTaGVldHMARGVzY2VuZGFudHMAZ2V0X0NoaWxkRWxlbWVudHMARmluaXNoT3V0cHV0cwBnZXRf
Um93cwBDcmVhdGVOZXdPdXRwdXRSb3dzAEVsZW1lbnRBdABDb25jYXQAR2V0RGF0ZVRpbWVGb3Jt
YXQAQ2VsbEZvcm1hdABPYmplY3QAU2hlZXQARG9jdW1lbnRGb3JtYXQuT3BlblhtbC5TcHJlYWRz
aGVldABnZXRfU3R5bGVzaGVldABnZXRfV29ya3NoZWV0AFNldEVuZE9mUm93c2V0AG9wX0ltcGxp
Y2l0AGdldF9EZWZhdWx0AEZpcnN0T3JEZWZhdWx0AERpYWxvZ1Jlc3VsdABPcGVuWG1sRWxlbWVu
dABPcGVuWG1sTGVhZlRleHRFbGVtZW50AFNwcmVhZHNoZWV0RG9jdW1lbnQAVXNlckNvbXBvbmVu
dABQYXJlbnRDb21wb25lbnQAU2NyaXB0Q29tcG9uZW50AGdldF9DdXJyZW50AGdldF9Db3VudABN
aWNyb3NvZnQuU3FsU2VydmVyLlR4U2NyaXB0AHdiUGFydABnZXRfU2hhcmVkU3RyaW5nVGFibGVQ
YXJ0AGdldF9Xb3JrYm9va1BhcnQAT3BlblhtbFBhcnQAZ2V0X1dvcmtib29rU3R5bGVzUGFydABX
b3Jrc2hlZXRQYXJ0AENvbnZlcnQAVG9MaXN0AE9wZW5YbWxFbGVtZW50TGlzdABNaWNyb3NvZnQu
U3FsU2VydmVyLlBpcGVsaW5lSG9zdABGaXJzdABQcmltZU91dHB1dABNb3ZlTmV4dABnZXRfVGV4
dABnZXRfSW5uZXJUZXh0AERhdGFSb3cAQWRkUm93AE5ld1JvdwBTaG93AGdldF9TdHlsZUluZGV4
AGdldF9Sb3dJbmRleABpbmRleABNZXNzYWdlQm94AENvbnRhaW5zS2V5AGdldF9Bc3NlbWJseQBE
YXRlRm9ybWF0RGljdGlvbmFyeQBvcF9FcXVhbGl0eQBvcF9JbmVxdWFsaXR5AEV4Y2VsVXRpbGl0
eQBJc051bGxPckVtcHR5AAAAAAEAA2MAABVkAGQALwBNAE0ALwB5AHkAeQB5AAARZAAtAE0ATQBN
AC0AeQB5AAELZAAtAE0ATQBNAAENTQBNAE0ALQB5AHkAARVoADoAbQBtACAAQQBNAC8AUABNAAAb
aAA6AG0AbQA6AHMAcwAgAEEATQAvAFAATQAACWgAOgBtAG0AAA9oADoAbQBtADoAcwBzAAAXTQAv
AGQALwB5AHkAIABoADoAbQBtAAANTQAvAGQALwB5AHkAABV5AHkAeQB5AC0ATQBNAC0AZABkAAEL
bQBtADoAcwBzAAATWwBoAF0AOgBtAG0AOgBzAHMAAA1tAG0AcwBzAC4AMAAAC00ATQAtAGQAZAAB
GWQAZAAgAE0ATQBNAE0AIAB5AHkAeQB5AAARZABkAC8ATQBNAC8AeQB5AAANZAAuAE0ALgB5AHkA
ABdkACAATQBNAE0ATQAgAHkAeQB5AHkAAAdNAC8AZAAAEU0ATQAvAGQAZAAvAHkAeQAAE2QAZAAt
AE0ATQBNAC0AeQB5AAEPTQBNAE0ATQAtAHkAeQABGU0ATQBNAE0AIABkACwAIAB5AHkAeQB5AAAd
TQAvAGQALwB5AHkAIABoAGgAOgBtAG0AIAB0AAAXTQAvAGQALwB5ACAASABIADoAbQBtAAAHTQBN
AE0AAA1NAE0ATQAtAGQAZAABEU0ALwBkAC8AeQB5AHkAeQAAFWQALQBNAE0ATQAtAHkAeQB5AHkA
AUlFADoAXABSAGUAcABvAHMAXABMAHYAUgBlAHAAbwBcAFQAZQBzAHQARABhAHQAYQBcAFQAZQBz
AHQAMAAxAC4AeABsAHMAeAAAC0wAYQBtAFYAVAAAgJtJAHMATgB1AGwAbAAgAHAAcgBvAHAAZQBy
AHQAeQAgAGMAYQBuAG4AbwB0ACAAYgBlACAAcwBlAHQAIAB0AG8AIABGAGEAbABzAGUALgAgAEEA
cwBzAGkAZwBuACAAYQAgAHYAYQBsAHUAZQAgAHQAbwAgAHQAaABlACAAYwBvAGwAdQBtAG4AIABp
AG4AcwB0AGUAYQBkAC4AABVvAHUAdABwAHUAdABEAGEAdABhAABxUwBDAF8AMQAxAGMAOAA4AGQA
NQBkADMANAA2AGIANABhADYANgBiAGYAYgBlADkAMgAyADkAMgA0ADcANABmAGQAYgAyAC4AUABy
AG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAAqPyHzs0gERIEB6Lh0boeVAAQg
AQEIAyAAAQUgAQEREQQgAQEOBiABARGArRcHCxJFDhURSQESRRJFEk0ODhJRDg0RVQYVEkEBEkUI
IAAVEUkBEwAGFRFJARJFBCAAEwAFIAASgL0DIAAOBCABAg4DIAACBCAAEk0KIAAVEoDNARGA0QgV
EoDNARGA0QUgABKA1QUgABKA2QkwAQAVEmEBHgAFCgESgN0EAAEIDgwQAQIeABUSYQEeAAgCBg4E
IAASfQUgABKA6QUgABKA7QUgABKA8QUgABKA9QYgARKAyQgEAAECDgYAAgIOEA0FAAERVQ0EIAEO
DgYHBAgOCAMEAAEDCAUAAg4ODgQHARJZKQcQEigSWRJdEj0VEmEBEmUOEmkVEmEBEm0IFRJxARJt
Em0ICBJtEnUIBgACEl0OAgQgABI9BSAAEoEJBTABAB4ABQoBEoENBAoBEmUFAAICDg4LEAEBHgAV
EmEBHgAIFRKBEQISZQIFIAIBHBgXEAECFRJhAR4AFRJhAR4AFRKBEQIeAAIGIAESgRkOBSAAEoEh
BAoBEmkECgESbQYVEmEBEm0IIAAVEnEBEwAGFRJxARJtBAoBEkUKEAEBCBUSYQEeAAUgABKBJQYg
ARKBKQ4PEAEBFRJBAR4AFRJhAR4ABhUSQQESbQMgAAgGAAERgTEOBCAAEnUFIAIBCBwFIAASgTUF
IAEBEnUgBw0SLBJZEl0SPRUSYQESZQ4SaQgIFRJxARJtEm0SdQgFAAEJEn0GFRI5AgkOBSABAhMA
BiABEwETAAcgAgETABMBCgcDEoCJEnUSgI0FIAASgIkDIAAcBCABHAgLIAMBEoCVHQgSgJkDBwEI
BwACCBKAmQ4FIAEdCAgIAAESgUURgUkFIAASgU0HIAIBDhKBTQYAAQ4SgL0It3pcVhk04IkIMb84
Vq02TjUIiYRdzYCAzJEEAAAAAAcGFRI5AgkOAwYSGAMGEhwDBhIQBAYSgJ0EBhKApQQGEoCpAwYS
JAwAAw4SPRUSQQESRQ4MAAMOEj0VEkEBEkUIBAABDggHAAMSWQ4OCAYAAhJZDg4FAAEOEn0DAAAB
BCABAQINIAQBCB0IHRKAlRKAmQYgAQESgJ0FAAASgKUFAAASgKkGAAEBEoCpBAAAEiQFIAECEmUD
KAAOAygAAgUIABKApQUIABKAqQQIABIkCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9u
VGhyb3dzAQgBAAIAAAAAACgBACNTQ18xMWM4OGQ1ZDM0NmI0YTY2YmZiZTkyMjkyNDc0ZmRiMgAA
BQEAAAAAFgEAEUNvcHlyaWdodCBAICAyMDIwAABJAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0
LjUBAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEi5ORVQgRnJhbWV3b3JrIDQuNQQBAAAAtAAAAM7K
774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVy
c2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkz
NGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQ
QURQtAAAAJxNAAAAAAAAAAAAALZNAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAACoTQAAAAAAAAAA
AAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAAAAAYAACA
AAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWGAAAOwDAAAA
AAAAAAAAAOwDNAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAABAAAA
AQAAAAAAAAABAAAAAAA/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIARgBp
AGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsARMAwAA
AQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAAAoAwAAAQAwADAAMAAwADAANABiADAAAAAa
AAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBOAGEAbQBlAAAA
AAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAQwBfADEAMQBj
ADgAOABkADUAZAAzADQANgBiADQAYQA2ADYAYgBmAGIAZQA5ADIAMgA5ADIANAA3ADQAZgBkAGIA
MgAAADAACAABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgAwAC4AMAAAAHAAKAAB
AEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBDAF8AMQAxAGMAOAA4AGQANQBkADMANAA2AGIA
NABhADYANgBiAGYAYgBlADkAMgAyADkAMgA0ADcANABmAGQAYgAyAC4AZABsAGwAAABIABIAAQBM
AGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIAAgADIA
MAAyADAAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAAAAAAAHgAKAAB
AE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAEMAXwAxADEAYwA4ADgAZAA1AGQA
MwA0ADYAYgA0AGEANgA2AGIAZgBiAGUAOQAyADIAOQAyADQANwA0AGYAZABiADIALgBkAGwAbAAA
AGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBDAF8AMQAxAGMAOAA4AGQANQBkADMA
NAA2AGIANABhADYANgBiAGYAYgBlADkAMgAyADkAMgA0ADcANABmAGQAYgAyAAAANAAIAAEAUABy
AG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgAwAC4AMAAAADgACAABAEEAcwBzAGUA
bQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADAALgAwAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAwAAADIPQAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                  name="VSTAProjectName"
                  typeConverter="NOTBROWSABLE">SC_11c88d5d346b4a66bfbe92292474fdb2</property>
                <property
                  dataType="System.String"
                  description="Specifies the programming language used by the script."
                  name="ScriptLanguage"
                  typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read-only variables."
                  name="ReadOnlyVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg"></property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read/write variables."
                  name="ReadWriteVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                <property
                  dataType="System.String"
                  description="List of breakpoints present on the script."
                  isArray="true"
                  name="BreakpointCollection"
                  typeConverter="NOTBROWSABLE">
                  <arrayElements
                    arrayElementCount="0" />
                </property>
                <property
                  dataType="System.String"
                  description="Checksum to match component metedata against compiled codes."
                  name="MetadataChecksum140"
                  typeConverter="NOTBROWSABLE">82</property>
                <property
                  dataType="System.String"
                  name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
              </properties>
              <outputs>
                <output
                  refId="Package\Data Flow Task\Script Component.Outputs[outputData]"
                  hasSideEffects="true"
                  name="outputData">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task\Script Component.Outputs[outputData].Columns[Id]"
                      dataType="wstr"
                      length="50"
                      lineageId="Package\Data Flow Task\Script Component.Outputs[outputData].Columns[Id]"
                      name="Id" />
                    <outputColumn
                      refId="Package\Data Flow Task\Script Component.Outputs[outputData].Columns[TextValue]"
                      dataType="wstr"
                      length="50"
                      lineageId="Package\Data Flow Task\Script Component.Outputs[outputData].Columns[TextValue]"
                      name="TextValue" />
                    <outputColumn
                      refId="Package\Data Flow Task\Script Component.Outputs[outputData].Columns[NumberValue]"
                      dataType="wstr"
                      length="50"
                      lineageId="Package\Data Flow Task\Script Component.Outputs[outputData].Columns[NumberValue]"
                      name="NumberValue" />
                    <outputColumn
                      refId="Package\Data Flow Task\Script Component.Outputs[outputData].Columns[MixedValue]"
                      dataType="wstr"
                      length="50"
                      lineageId="Package\Data Flow Task\Script Component.Outputs[outputData].Columns[MixedValue]"
                      name="MixedValue" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Data Flow Task\Sort"
              componentClassID="Microsoft.Sort"
              contactInfo="Sort;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
              description="Sorts input data in ascending or descending order when it cannot be sorted at its source. For example, sort sales data by 'customer id' before it is written to a flat file and delivered to another department. Note: We do not recommend this transformation for large data flows."
              name="Sort"
              version="1">
              <properties>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the Sort transformation removes rows with duplicate sort values."
                  name="EliminateDuplicates">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the maximum number of threads to use for sorting."
                  expressionType="Notify"
                  name="MaximumThreads">-1</property>
              </properties>
              <inputs>
                <input
                  refId="Package\Data Flow Task\Sort.Inputs[Sort Input]"
                  name="Sort Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Data Flow Task\Sort.Inputs[Sort Input].Columns[Id]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="Id"
                      lineageId="Package\Data Flow Task\Script Component.Outputs[outputData].Columns[Id]">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the comparison options for character data."
                          name="NewComparisonFlags">0</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the sort order of the column."
                          name="NewSortKeyPosition">1</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Data Flow Task\Sort.Inputs[Sort Input].Columns[TextValue]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="TextValue"
                      lineageId="Package\Data Flow Task\Script Component.Outputs[outputData].Columns[TextValue]">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the comparison options for character data."
                          name="NewComparisonFlags">0</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the sort order of the column."
                          name="NewSortKeyPosition">0</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Data Flow Task\Sort.Inputs[Sort Input].Columns[NumberValue]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="NumberValue"
                      lineageId="Package\Data Flow Task\Script Component.Outputs[outputData].Columns[NumberValue]">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the comparison options for character data."
                          name="NewComparisonFlags">0</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the sort order of the column."
                          name="NewSortKeyPosition">0</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Data Flow Task\Sort.Inputs[Sort Input].Columns[MixedValue]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="MixedValue"
                      lineageId="Package\Data Flow Task\Script Component.Outputs[outputData].Columns[MixedValue]">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the comparison options for character data."
                          name="NewComparisonFlags">0</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the sort order of the column."
                          name="NewSortKeyPosition">0</property>
                      </properties>
                    </inputColumn>
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Data Flow Task\Sort.Outputs[Sort Output]"
                  isSorted="true"
                  name="Sort Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task\Sort.Outputs[Sort Output].Columns[Id]"
                      dataType="wstr"
                      length="50"
                      lineageId="Package\Data Flow Task\Sort.Outputs[Sort Output].Columns[Id]"
                      name="Id"
                      sortKeyPosition="1">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the lineage identifier of the input column that is associated with this output column."
                          name="SortColumnId">#{Package\Data Flow Task\Script Component.Outputs[outputData].Columns[Id]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Data Flow Task\Sort.Outputs[Sort Output].Columns[TextValue]"
                      dataType="wstr"
                      length="50"
                      lineageId="Package\Data Flow Task\Sort.Outputs[Sort Output].Columns[TextValue]"
                      name="TextValue">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the lineage identifier of the input column that is associated with this output column."
                          name="SortColumnId">#{Package\Data Flow Task\Script Component.Outputs[outputData].Columns[TextValue]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Data Flow Task\Sort.Outputs[Sort Output].Columns[NumberValue]"
                      dataType="wstr"
                      length="50"
                      lineageId="Package\Data Flow Task\Sort.Outputs[Sort Output].Columns[NumberValue]"
                      name="NumberValue">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the lineage identifier of the input column that is associated with this output column."
                          name="SortColumnId">#{Package\Data Flow Task\Script Component.Outputs[outputData].Columns[NumberValue]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Data Flow Task\Sort.Outputs[Sort Output].Columns[MixedValue]"
                      dataType="wstr"
                      length="50"
                      lineageId="Package\Data Flow Task\Sort.Outputs[Sort Output].Columns[MixedValue]"
                      name="MixedValue">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the lineage identifier of the input column that is associated with this output column."
                          name="SortColumnId">#{Package\Data Flow Task\Script Component.Outputs[outputData].Columns[MixedValue]}</property>
                      </properties>
                    </outputColumn>
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
          </components>
          <paths>
            <path
              refId="Package\Data Flow Task.Paths[outputData]"
              endId="Package\Data Flow Task\Sort.Inputs[Sort Input]"
              name="outputData"
              startId="Package\Data Flow Task\Script Component.Outputs[outputData]" />
          </paths>
        </pipeline>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="155,42"
          Id="Package\Data Flow Task"
          TopLeft="413,148" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Data Flow Task">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="99,42"
          Id="Package\Data Flow Task\Sort"
          TopLeft="531,295" />
        <NodeLayout
          Size="167,42"
          Id="Package\Data Flow Task\Script Component"
          TopLeft="542,149" />
        <EdgeLayout
          Id="Package\Data Flow Task.Paths[outputData]"
          TopLeft="625.5,191">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-45,104"
              Start="0,0"
              End="-45,96.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,48" />
                  <mssgle:CubicBezierSegment
                    Point1="0,48"
                    Point2="0,52"
                    Point3="-4,52" />
                  <mssgle:LineSegment
                    End="-41,52" />
                  <mssgle:CubicBezierSegment
                    Point1="-41,52"
                    Point2="-45,52"
                    Point3="-45,56" />
                  <mssgle:LineSegment
                    End="-45,96.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-46.65623046875,57,16,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>